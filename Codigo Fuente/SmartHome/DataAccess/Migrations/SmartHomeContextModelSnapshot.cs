// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(SmartHomeContext))]
    partial class SmartHomeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Abstract.Device", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoURLs")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Devices");

                    b.HasDiscriminator<string>("Kind").HasValue("Device");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Abstract.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Roles");

                    b.HasDiscriminator<string>("Kind").HasValue("Role");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Concrete.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("LogoURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("RUT")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValidationMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Domain.Concrete.DeviceUnit", b =>
                {
                    b.Property<Guid>("HardwareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("DeviceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("HomeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsConnected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RoomId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HardwareId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("HomeId");

                    b.HasIndex("RoomId");

                    b.ToTable("DeviceUnits");
                });

            modelBuilder.Entity("Domain.Concrete.Home", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoorNumber")
                        .HasColumnType("int");

                    b.Property<long?>("HomeOwnerId")
                        .HasColumnType("bigint");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("MaximumMembers")
                        .HasColumnType("int");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HomeOwnerId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Homes", (string)null);
                });

            modelBuilder.Entity("Domain.Concrete.Member", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("HasPermissionToAddADevice")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPermissionToListDevices")
                        .HasColumnType("bit");

                    b.Property<long?>("HomeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ReceivesNotifications")
                        .HasColumnType("bit");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("HomeId");

                    b.HasIndex("UserId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Domain.Concrete.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DeviceUnitHardwareId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("HomeId")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DeviceUnitHardwareId");

                    b.HasIndex("HomeId");

                    b.HasIndex("MemberId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Domain.Concrete.Room", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("HomeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HomeId");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("Domain.Concrete.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Domain.Concrete.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Concrete.MotionSensor", b =>
                {
                    b.HasBaseType("Domain.Abstract.Device");

                    b.Property<string>("Functionalities")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Functionalities");

                    b.ToTable("Devices", (string)null);

                    b.HasDiscriminator().HasValue("MotionSensor");
                });

            modelBuilder.Entity("Domain.Concrete.SecurityCamera", b =>
                {
                    b.HasBaseType("Domain.Abstract.Device");

                    b.Property<string>("Functionalities")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Functionalities");

                    b.Property<int?>("LocationType")
                        .HasColumnType("int");

                    b.ToTable("Devices", (string)null);

                    b.HasDiscriminator().HasValue("SecurityCamera");
                });

            modelBuilder.Entity("Domain.Concrete.SmartLamp", b =>
                {
                    b.HasBaseType("Domain.Abstract.Device");

                    b.Property<string>("Functionalities")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Functionalities");

                    b.ToTable("Devices", (string)null);

                    b.HasDiscriminator().HasValue("SmartLamp");
                });

            modelBuilder.Entity("Domain.Concrete.WindowSensor", b =>
                {
                    b.HasBaseType("Domain.Abstract.Device");

                    b.Property<string>("Functionalities")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Functionalities");

                    b.ToTable("Devices", (string)null);

                    b.HasDiscriminator().HasValue("WindowSensor");
                });

            modelBuilder.Entity("Domain.Concrete.Administrator", b =>
                {
                    b.HasBaseType("Domain.Abstract.Role");

                    b.ToTable("Roles", (string)null);

                    b.HasDiscriminator().HasValue("Administrator");
                });

            modelBuilder.Entity("Domain.Concrete.CompanyOwner", b =>
                {
                    b.HasBaseType("Domain.Abstract.Role");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasACompleteCompany")
                        .HasColumnType("bit");

                    b.HasIndex("CompanyId");

                    b.ToTable("Roles", (string)null);

                    b.HasDiscriminator().HasValue("CompanyOwner");
                });

            modelBuilder.Entity("Domain.Concrete.HomeOwner", b =>
                {
                    b.HasBaseType("Domain.Abstract.Role");

                    b.ToTable("Roles", (string)null);

                    b.HasDiscriminator().HasValue("HomeOwner");
                });

            modelBuilder.Entity("Domain.Abstract.Device", b =>
                {
                    b.HasOne("Domain.Concrete.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Abstract.Role", b =>
                {
                    b.HasOne("Domain.Concrete.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Concrete.Company", b =>
                {
                    b.HasOne("Domain.Concrete.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Concrete.DeviceUnit", b =>
                {
                    b.HasOne("Domain.Abstract.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Concrete.Home", null)
                        .WithMany("Devices")
                        .HasForeignKey("HomeId");

                    b.HasOne("Domain.Concrete.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Device");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Concrete.Home", b =>
                {
                    b.HasOne("Domain.Concrete.HomeOwner", null)
                        .WithMany("Homes")
                        .HasForeignKey("HomeOwnerId");

                    b.HasOne("Domain.Concrete.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Concrete.Member", b =>
                {
                    b.HasOne("Domain.Concrete.Home", null)
                        .WithMany("Members")
                        .HasForeignKey("HomeId");

                    b.HasOne("Domain.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Concrete.Notification", b =>
                {
                    b.HasOne("Domain.Concrete.DeviceUnit", "DeviceUnit")
                        .WithMany()
                        .HasForeignKey("DeviceUnitHardwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Concrete.Home", "Home")
                        .WithMany()
                        .HasForeignKey("HomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Concrete.Member", "Member")
                        .WithMany("Notifications")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DeviceUnit");

                    b.Navigation("Home");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Domain.Concrete.Room", b =>
                {
                    b.HasOne("Domain.Concrete.Home", null)
                        .WithMany("Rooms")
                        .HasForeignKey("HomeId");
                });

            modelBuilder.Entity("Domain.Concrete.Session", b =>
                {
                    b.HasOne("Domain.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Concrete.CompanyOwner", b =>
                {
                    b.HasOne("Domain.Concrete.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Concrete.Home", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Members");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Domain.Concrete.Member", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Domain.Concrete.User", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Domain.Concrete.HomeOwner", b =>
                {
                    b.Navigation("Homes");
                });
#pragma warning restore 612, 618
        }
    }
}
